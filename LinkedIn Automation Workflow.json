{
  "name": "LinkedIn Automation Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "30 23 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -240,
        112
      ],
      "id": "8a447d0f-83f8-4e6c-b753-e41a0d3aa2d6",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=drone+OR+UAV+technology+OR+DGCA+India+when:1d&hl=en-IN&gl=IN&ceid=IN:en",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        112
      ],
      "id": "43976407-11e9-4ca2-ba65-99c9eca2eb29",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Get parsed RSS feed\nconst channel = $input.first().json.rss.channel;\nconst items = Array.isArray(channel.item) ? channel.item : [channel.item];\n\nconst articles = items.slice(0, 5).map(a => {\n  let image = null;\n  if (a[\"media:content\"]) {\n    image = Array.isArray(a[\"media:content\"]) ? a[\"media:content\"][0][\"$\"]?.url : a[\"media:content\"][\"$\"]?.url;\n  }\n  if (!image && a[\"media:thumbnail\"]) {\n    image = a[\"media:thumbnail\"][\"$\"]?.url;\n  }\n  if (!image && a.enclosure && a.enclosure[\"$\"]?.url) {\n    image = a.enclosure[\"$\"].url;\n  }\n  return {\n    title: a.title,\n    link: a.link,\n    pubDate: a.pubDate,\n    image: image || \"https://via.placeholder.com/600x400?text=Drone+News\"\n  };\n});\n\nreturn articles.map(article => ({ json: article }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        112
      ],
      "id": "18c6e6a2-cfc4-44e7-91b3-0ea89752f1f5",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a professional news summarizer. Take the following article metadata and write a clear, engaging 1-paragraph summary as well as relavent 3 hashtags that could be posted on LinkedIn. Keep it under 800 characters.\n\nTitle: {{ $json[\"title\"] }}\nPublication Date: {{ $json[\"pubDate\"] }}\nLink: {{ $json[\"link\"] }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1008,
        112
      ],
      "id": "0378c5e5-b1b9-4de3-85f2-c57c7371c66b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1rR6VvvohGmYv3svLNA-mDqJ1i_yBLL98V6GI83cui20",
          "mode": "list",
          "cachedResultName": "news agent"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $('Code').item.json.title }}",
            "link": "={{ $('Code').item.json.link }}",
            "summary": "={{ $('AI Agent').item.json.output }}",
            "pubDate": "={{ $('Code').item.json.pubDate }}",
            "Image": "={{ $json.image }}",
            "Done": "={{ false }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Image",
              "displayName": "Image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Done",
              "displayName": "Done",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -160,
        512
      ],
      "id": "6f8f044a-4329-4571-be7d-42c364c099e2",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jaoDfcgdS2HAjRHW",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rR6VvvohGmYv3svLNA-mDqJ1i_yBLL98V6GI83cui20",
          "mode": "list",
          "cachedResultName": "news agent"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Done",
              "lookupValue": false
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        80,
        512
      ],
      "id": "93624274-bf67-4a42-9480-280c9f44bc7b",
      "name": "Get row(s) in sheet",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jaoDfcgdS2HAjRHW",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.Image }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        304,
        512
      ],
      "id": "07570ccf-ea88-48b8-bdce-476363a10fcc",
      "name": "Download Image (Binary)"
    },
    {
      "parameters": {
        "person": "_OlDmuzguG",
        "text": "={{ $json.title }}\n\n{{ $json.summary.substring(0, 2500) }}\n\nFor complete info: {{ $json.link }}",
        "shareMediaCategory": "IMAGE",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        960,
        512
      ],
      "id": "7c3d873e-033a-470e-953d-ba857fd0e4d1",
      "name": "Create LinkedIn Post (with Image)",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "y4KR8MfuOT6snRIM",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1rR6VvvohGmYv3svLNA-mDqJ1i_yBLL98V6GI83cui20",
          "mode": "list",
          "cachedResultName": "news agent"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Done": "=\"true\"",
            "row_number": "={{ $('Download Image (Binary)').item.json.row_number }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Image",
              "displayName": "Image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Done",
              "displayName": "Done",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1200,
        512
      ],
      "id": "20d33c73-30db-439d-ab20-eb2e547028c1",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "jaoDfcgdS2HAjRHW",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        816,
        208
      ],
      "id": "036cc777-7c30-478e-9664-0af79a5cb1d9",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "W9HtA0xxQZs7yKAX",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "query": "={{ $('Code').item.json.title }} provide an image based on this ",
        "options": {
          "max_results": 2,
          "include_images": true
        }
      },
      "type": "@tavily/n8n-nodes-tavily.tavily",
      "typeVersion": 1,
      "position": [
        1392,
        112
      ],
      "id": "d366a567-713c-4e05-8f30-3df282f63561",
      "name": "Search",
      "alwaysOutputData": false,
      "credentials": {
        "tavilyApi": {
          "id": "XKJkqcDnmgxhStcP",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  // Get all images from Tavily\n  const imgs = item.json.images || []\n\n  // Filter only JPG/JPEG\n  const jpgs = imgs.filter(url => url.match(/\\.(jpg|jpeg)$/i))\n\n  // Pick the first JPG/JPEG, or empty string if none found\n  const firstImage = jpgs.length > 0 ? jpgs[0] : \"\"\n\n  return {\n    json: {\n      title: item.json.query,\n      image: firstImage\n    }\n  }\n})\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        112
      ],
      "id": "9017c0c9-2718-495c-beb4-07f41aa630ce",
      "name": "Code1"
    },
    {
      "parameters": {
        "content": "# LinkedIn Automation Agent",
        "height": 80,
        "width": 496
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        512,
        -176
      ],
      "typeVersion": 1,
      "id": "94ac6708-ba52-4471-b927-273768a9a4c4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Automates LinkedIn post creation by pulling, summarizing, and posting news updates, including image handling and spreadsheet tracking.\n",
        "height": 256,
        "width": 848,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        720,
        416
      ],
      "typeVersion": 1,
      "id": "1e8a0380-086c-4250-8c89-398381b1e2ff",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        192,
        112
      ],
      "id": "6177cda0-3cc9-448c-8b48-8c8059be061f",
      "name": "XML"
    },
    {
      "parameters": {
        "content": "## Here we are getting data from Google RSS then converting to json format\n",
        "height": 224,
        "width": 976,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        32
      ],
      "typeVersion": 1,
      "id": "e02d224b-3fc5-470e-8b8e-3f6a892fa4e3",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Now we are using GPT OSS 12B model to summarize the news articles and getting the images from Tavily",
        "height": 256,
        "width": 992,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        864,
        16
      ],
      "typeVersion": 1,
      "id": "37b25f39-e97b-47c5-9c21-c9786fe2ebc0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## To Append the title, Source Link,Publication Date, Image of each of the article",
        "height": 272,
        "width": 784,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -192,
        400
      ],
      "typeVersion": 1,
      "id": "8b6963fc-3eca-4a6f-893f-e86969707155",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Download Image (Binary)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image (Binary)": {
      "main": [
        [
          {
            "node": "Create LinkedIn Post (with Image)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create LinkedIn Post (with Image)": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fc6eb523-c4d8-4bf3-a5b4-5d36f1432779",
  "meta": {
    "instanceId": "85acacd8322b31e0495a5845c354c9f079c3a67fafc5652bb920bf383e2b24ef"
  },
  "id": "5tYUuGQ3ApCuv6d4",
  "tags": []
}